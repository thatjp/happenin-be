# Generated by Django 5.2.1 on 2025-08-18 18:32

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ScrapingTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name/description of the scraping target', max_length=200)),
                ('url', models.URLField(help_text='URL to scrape', validators=[django.core.validators.URLValidator()])),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('disabled', 'Disabled')], default='active', max_length=20)),
                ('frequency', models.CharField(choices=[('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('custom', 'Custom')], default='daily', max_length=20)),
                ('custom_interval_minutes', models.PositiveIntegerField(blank=True, help_text="Custom interval in minutes (only used when frequency is 'custom')", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10080)])),
                ('delay_between_requests', models.PositiveIntegerField(default=5, help_text='Delay between requests in seconds', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3600)])),
                ('max_requests_per_hour', models.PositiveIntegerField(default=100, help_text='Maximum requests per hour', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('respect_robots_txt', models.BooleanField(default=True, help_text='Respect robots.txt file')),
                ('user_agent', models.CharField(default='Happin Scraper Bot (+https://happin.com/bot)', help_text='User agent string to use for requests', max_length=500)),
                ('extraction_rules', models.JSONField(blank=True, default=dict, help_text='JSON configuration for data extraction')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_scraped', models.DateTimeField(blank=True, null=True)),
                ('next_scrape_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(help_text='User who created this scraping target', on_delete=django.db.models.deletion.CASCADE, related_name='scraping_targets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Scraping Target',
                'verbose_name_plural': 'Scraping Targets',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ScrapingJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('job_type', models.CharField(choices=[('scheduled', 'Scheduled'), ('manual', 'Manual'), ('retry', 'Retry')], default='scheduled', max_length=20)),
                ('scheduled_at', models.DateTimeField(help_text='When the job was scheduled to run')),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('success', models.BooleanField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('items_scraped', models.PositiveIntegerField(default=0)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('response_size_bytes', models.PositiveIntegerField(blank=True, null=True)),
                ('celery_task_id', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraping_jobs', to='scraping.scrapingtarget')),
            ],
            options={
                'verbose_name': 'Scraping Job',
                'verbose_name_plural': 'Scraping Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScrapedData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='URL that was scraped')),
                ('title', models.CharField(blank=True, max_length=500)),
                ('content', models.TextField(blank=True)),
                ('raw_html', models.TextField(blank=True)),
                ('extracted_data', models.JSONField(blank=True, default=dict, help_text='Structured data extracted from the page')),
                ('status', models.CharField(choices=[('raw', 'Raw'), ('processed', 'Processed'), ('archived', 'Archived')], default='raw', max_length=20)),
                ('http_status_code', models.PositiveIntegerField(blank=True, null=True)),
                ('content_type', models.CharField(blank=True, max_length=100)),
                ('scraped_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraped_data', to='scraping.scrapingjob')),
            ],
            options={
                'verbose_name': 'Scraped Data',
                'verbose_name_plural': 'Scraped Data',
                'ordering': ['-scraped_at'],
                'indexes': [models.Index(fields=['status', 'scraped_at'], name='scraping_sc_status_d4ab42_idx'), models.Index(fields=['url', 'scraped_at'], name='scraping_sc_url_a6f2d2_idx')],
            },
        ),
        migrations.CreateModel(
            name='ScrapingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name/description of the rule', max_length=200)),
                ('rule_type', models.CharField(choices=[('css_selector', 'CSS Selector'), ('xpath', 'XPath'), ('regex', 'Regular Expression'), ('json_path', 'JSON Path')], default='css_selector', max_length=20)),
                ('selector', models.CharField(help_text='CSS selector, XPath, or regex pattern', max_length=500)),
                ('attribute', models.CharField(blank=True, help_text="HTML attribute to extract (e.g., 'href', 'src')", max_length=100)),
                ('data_type', models.CharField(default='text', help_text='Type of data to extract (text, number, date, url, etc.)', max_length=50)),
                ('post_processing', models.JSONField(blank=True, default=dict, help_text='Post-processing rules (cleaning, validation, etc.)')),
                ('priority', models.PositiveIntegerField(default=1, help_text='Priority for processing (lower numbers = higher priority)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraping_rules', to='scraping.scrapingtarget')),
            ],
            options={
                'verbose_name': 'Scraping Rule',
                'verbose_name_plural': 'Scraping Rules',
                'ordering': ['priority', 'name'],
                'unique_together': {('target', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ScrapingMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date for these metrics')),
                ('jobs_scheduled', models.PositiveIntegerField(default=0)),
                ('jobs_completed', models.PositiveIntegerField(default=0)),
                ('jobs_failed', models.PositiveIntegerField(default=0)),
                ('items_scraped', models.PositiveIntegerField(default=0)),
                ('data_processed', models.PositiveIntegerField(default=0)),
                ('avg_response_time_ms', models.FloatField(blank=True, null=True)),
                ('total_response_size_bytes', models.BigIntegerField(default=0)),
                ('errors_count', models.PositiveIntegerField(default=0)),
                ('warnings_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='scraping.scrapingtarget')),
            ],
            options={
                'verbose_name': 'Scraping Metrics',
                'verbose_name_plural': 'Scraping Metrics',
                'ordering': ['-date'],
                'unique_together': {('target', 'date')},
            },
        ),
        migrations.CreateModel(
            name='ScrapingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', max_length=20)),
                ('message', models.TextField(help_text='Log message')),
                ('context', models.JSONField(blank=True, default=dict, help_text='Additional context data for the log entry')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='scraping.scrapingjob')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='scraping.scrapingtarget')),
            ],
            options={
                'verbose_name': 'Scraping Log',
                'verbose_name_plural': 'Scraping Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['level', 'created_at'], name='scraping_sc_level_981391_idx'), models.Index(fields=['target', 'created_at'], name='scraping_sc_target__a64eb1_idx')],
            },
        ),
    ]
